package gpt

import (
	"context"
	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

const (
	errRepeatChoice = "bad request, Bad Request: message is not modified: specified new message content and reply markup are exactly the same as a current content and reply markup of the message"
	paymentToken    = "381764678:TEST:99363"
	subDesc         = "GPT3.5/GPT-4/GoogleAI\n‚úÖ 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ\n‚úÖ –Ω–µ –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å\n–°—Ç–æ–∏–º–æ—Å—Ç—å: \nüí∞ 99 —Ä—É–±     - 2 –Ω–µ–¥–µ–ª–∏\nüí∞ 169 —Ä—É–±   - 1 –º–µ—Å—è—Ü (—ç–∫–æ–Ω–æ–º–∏—è: 32%)\nüí∞ 1599 —Ä—É–± - 1 –≥–æ–¥ (—ç–∫–æ–Ω–æ–º–∏—è: 61%)"
)

func GeneralButtonHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	_, err := b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: update.CallbackQuery.ID,
		ShowAlert:       false,
	})
	if err != nil {
		panic(err.Error())
	}

	switch update.CallbackQuery.Data {
	case "button_pick_gpt":
		db, err := manage.Connection()
		if err != nil {
			panic(err.Error())
		}
	
		ais := []*Message{
			{Name: "GPT-3.5", ButtonTag: "button_pick_gpt35"},
			{Name: "GPT-4", ButtonTag: "button_pick_gpt4"},
			{Name: "üîô–ù–∞–∑–∞–¥", ButtonTag: "button_pick_gpt_back"},
		}
	
		chosenParam, err := manage.GetParam[string](db, manage.GetUserParam, update.CallbackQuery.Message.Message.Chat.ID, "ai")
		if err != nil {
			panic(err.Error())
		}
		AddCheckMark(ais, chosenParam)
	
		_, err = b.EditMessageReplyMarkup(ctx, &bot.EditMessageReplyMarkupParams{
			ChatID:      update.CallbackQuery.Message.Message.Chat.ID,
			MessageID:   update.CallbackQuery.Message.Message.ID,
			ReplyMarkup: InlineKeyboardMarkUpGenerate(ais),
		})
		if err != nil {
			if err.Error() == errRepeatChoice {
				break
			}
			panic(err.Error())
		}
		break
	case "button_pick_gpt35":
		db, err := manage.Connection()
		if err != nil {
			panic(err.Error())
		}
	
		err = manage.UpdateParam(db, manage.UpdateUserParam, update.CallbackQuery.Message.Message.Chat.ID, "ai", manage.GPT35)
		if err != nil {
			panic(err.Error())
		}
	
		ais := []*Message{
			{Name: "GPT-3.5‚úÖ", ButtonTag: "button_pick_gpt35"},
			{Name: "GPT-4", ButtonTag: "button_pick_gpt4"},
			{Name: "üîô–ù–∞–∑–∞–¥", ButtonTag: "button_pick_gpt_back"},
		}
	
		_, err = b.EditMessageReplyMarkup(ctx, &bot.EditMessageReplyMarkupParams{
			ChatID:      update.CallbackQuery.Message.Message.Chat.ID,
			MessageID:   update.CallbackQuery.Message.Message.ID,
			ReplyMarkup: InlineKeyboardMarkUpGenerate(ais),
		})
		if err != nil {
			if err.Error() == errRepeatChoice {
				break
			}
			panic(err.Error())
		}
		break
	case "button_pick_gpt4":
		db, err := manage.Connection()
		if err != nil {
			panic(err.Error())
		}
	
		err = manage.UpdateParam(db, manage.UpdateUserParam, update.CallbackQuery.Message.Message.Chat.ID, "ai", manage.GPT4)
		if err != nil {
			panic(err.Error())
		}
	
		ais := []*Message{
			{Name: "GPT-3.5", ButtonTag: "button_pick_gpt35"},
			{Name: "GPT-4‚úÖ", ButtonTag: "button_pick_gpt4"},
			{Name: "üîô–ù–∞–∑–∞–¥", ButtonTag: "button_pick_gpt_back"},
		}
	
		_, err = b.EditMessageReplyMarkup(ctx, &bot.EditMessageReplyMarkupParams{
			ChatID:      update.CallbackQuery.Message.Message.Chat.ID,
			MessageID:   update.CallbackQuery.Message.Message.ID,
			ReplyMarkup: InlineKeyboardMarkUpGenerate(ais),
		})
		if err != nil {
			if err.Error() == errRepeatChoice {
				break
			}
			panic(err.Error())
		}
		break
	case "button_pick_gpt_back":
		db, err := manage.Connection()
		if err != nil {
			panic(err.Error())
		}
	
		chosenParam, err := manage.GetParam[string](db, manage.GetUserParam, update.CallbackQuery.Message.Message.Chat.ID, "ai")
		if err != nil {
			panic(err.Error())
		}
	
		ais := []*Message{
			{Name: "GPT", ButtonTag: "button_pick_gpt"},
			{Name: "GoogleAI", ButtonTag: "button_pick_googleai"},
		}
		AddCheckMark(ais, chosenParam)
	
		_, err = b.EditMessageReplyMarkup(ctx, &bot.EditMessageReplyMarkupParams{
			ChatID:      update.CallbackQuery.Message.Message.Chat.ID,
			MessageID:   update.CallbackQuery.Message.Message.ID,
			ReplyMarkup: InlineKeyboardMarkUpGenerate(ais),
		})
		if err != nil {
			if err.Error() == errRepeatChoice {
				break
			}
			panic(err.Error())
		}
		break
	case "button_pick_googleai":
		db, err := manage.Connection()
		if err != nil {
			panic(err.Error())
		}
	
		err = manage.UpdateParam(db, manage.UpdateUserParam, update.CallbackQuery.Message.Message.Chat.ID, "ai", manage.GoogleAI)
		if err != nil {
			panic(err.Error())
		}
	
		ais := []*Message{
			{Name: "GPT", ButtonTag: "button_pick_gpt"},
			{Name: "GoogleAI‚úÖ", ButtonTag: "button_pick_googleai"},
		}
	
		_, err = b.EditMessageReplyMarkup(ctx, &bot.EditMessageReplyMarkupParams{
			ChatID:      update.CallbackQuery.Message.Message.Chat.ID,
			MessageID:   update.CallbackQuery.Message.Message.ID,
			ReplyMarkup: InlineKeyboardMarkUpGenerate(ais),
		})
		if err != nil {
			if err.Error() == errRepeatChoice {
				break
			}
			panic(err.Error())
		}
		break
	case "button_get_subscribe":
		_, err = b.EditMessageText(ctx, &bot.EditMessageTextParams{
			ChatID:    update.CallbackQuery.Message.Message.Chat.ID,
			MessageID: update.CallbackQuery.Message.Message.ID,
			Text:      subDesc,
		})
	
		aisPrices := []*Message{
			{Name: "2 –Ω–µ–¥–µ–ª–∏", ButtonTag: "button_get_subscribe_2weeks"},
			{Name: "1 –º–µ—Å—è—Ü", ButtonTag: "button_get_subscribe_1month"},
			{Name: "1 –≥–æ–¥", ButtonTag: "button_get_subscribe_1year"},
		}
	
		_, err = b.EditMessageReplyMarkup(ctx, &bot.EditMessageReplyMarkupParams{
			ChatID:      update.CallbackQuery.Message.Message.Chat.ID,
			MessageID:   update.CallbackQuery.Message.Message.ID,
			ReplyMarkup: InlineKeyboardMarkUpGenerate(aisPrices),
		})
		if err != nil {
			if err.Error() == errRepeatChoice {
				break
			}
			panic(err.Error())
		}
		break
	case "button_get_subscribe_2weeks":
		_, err = b.SendInvoice(ctx, &bot.SendInvoiceParams{
			ChatID:        update.CallbackQuery.Message.Message.Chat.ID,
			Title:         "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏",
			Description:   "–í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å–µ –≤–∏–¥—ã AI –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–≤—É—Ö –Ω–µ–¥–µ–ª—å.",
			Payload:       manage.Payload2Weeks,
			ProviderToken: paymentToken,
			Currency:      "RUB",
			Prices: []models.LabeledPrice{
				{Label: "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏", Amount: 9900},
			},
		})
		if err != nil {
			panic(err.Error())
		}
		break
	case "button_get_subscribe_1month":
		_, err = b.SendInvoice(ctx, &bot.SendInvoiceParams{
			ChatID:        update.CallbackQuery.Message.Message.Chat.ID,
			Title:         "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏",
			Description:   "–í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å–µ –≤–∏–¥—ã AI –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞.",
			Payload:       manage.Payload1Month,
			ProviderToken: paymentToken,
			Currency:      "RUB",
			Prices: []models.LabeledPrice{
				{Label: "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü", Amount: 16900},
			},
		})
		if err != nil {
			panic(err.Error())
		}
		break
	case "button_get_subscribe_1year":
		_, err = b.SendInvoice(ctx, &bot.SendInvoiceParams{
			ChatID:        update.CallbackQuery.Message.Message.Chat.ID,
			Title:         "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –≥–æ–¥",
			Description:   "–í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å–µ –≤–∏–¥—ã AI –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –≥–æ–¥–∞.",
			Payload:       manage.Payload1Year,
			ProviderToken: paymentToken,
			Currency:      "RUB",
			Prices: []models.LabeledPrice{
				{Label: "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –≥–æ–¥", Amount: 159900},
			},
		})
		if err != nil {
			panic(err.Error())
		}
		break
	default:
		break
	}
}
