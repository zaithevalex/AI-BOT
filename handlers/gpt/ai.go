package gpt

import (
	"BOOT-BOT/db/manage"
	"BOOT-BOT/db/timers"
	"BOOT-BOT/handlers/general"
	"context"
	"fmt"
	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"github.com/google/generative-ai-go/genai"
	"google.golang.org/api/option"
	"reflect"
)

const (
	googleAIApiKey   = "AIzaSyDgG7MWSRHQr84zlgWyItUuIISrF5HGNAo"
	googleAIVersion  = "gemini-1.5-flash"
	gptDesc          = "GPT-4 - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, —ç—Ç–æ —Å–∏–º–≤–æ–ª –∏–Ω–Ω–æ–≤–∞—Ü–∏–π, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. üöÄ\n\nGPT-4 –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π:\n\n‚Ä¢ –ü–µ—Ä–µ–æ—Å–º—ã—Å–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: GPT-4 —Å–º–µ—â–∞–µ—Ç –ø—Ä–∏–≤—ã—á–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è, –æ—Ç–∫—Ä—ã–≤–∞—è –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á. ü§Ø\n‚Ä¢ –°–ª–∏—è–Ω–∏–µ —Ç—Ä–∞–¥–∏—Ü–∏–π –∏ –±—É–¥—É—â–µ–≥–æ: GPT-4 –∫–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–µ–º –º–µ—Ç–æ–¥—ã —Å –ø–µ—Ä–µ–¥–æ–≤—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏. üï∞Ô∏èü§ñ\n‚Ä¢ –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: GPT-4 - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞, –∞ –æ—Ç–ø—Ä–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π. üí´\n\nGPT-4 - —ç—Ç–æ –≤–∞—à –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É –≤ —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—è—é—â–µ–º—Å—è –º–∏—Ä–µ. üîëüåé\n\n\nGoogle GenAI:\n\nGoogle GenAI - –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. ü§ñüß†\n\nGoogle GenAI - —ç—Ç–æ:\n\n‚Ä¢ –ú–æ—â—å Google –≤ –≤–∞—à–µ–º —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–∏: –î–æ—Å—Ç—É–ø –∫ –Ω–µ–ø–æ—Å—Ç–∏–∂–∏–º—ã–º –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º Google, –ø–æ–∑–≤–æ–ª—è—é—â–∏–º —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ —Ç–æ—á–Ω–æ—Å—Ç—å—é. ‚ö°\n‚Ä¢ –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã: –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–¥–µ–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ä–µ—à–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é –ø–µ—Ä–µ–¥–æ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è. üí°\n‚Ä¢ –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: Google GenAI –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º: –æ—Ç –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –¥–æ –æ–ø—ã—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. üßë‚Äçüíª\n\nGoogle GenAI - –≤–∞—à –ø—É—Ç—å –∫ –±–µ—Å–ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –≤ –º–∏—Ä–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. üöÄ"
	infSubscribeTime = 100
	nilRequestsDesc  = "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π. –ß—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å ‚ù§Ô∏è"
)

func GPTHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.PreCheckoutQuery != nil {
		fmt.Printf("get PreCheckoutQuery for invoce payload: %s\n", update.PreCheckoutQuery.InvoicePayload)

		b.AnswerPreCheckoutQuery(ctx, &bot.AnswerPreCheckoutQueryParams{
			PreCheckoutQueryID: update.PreCheckoutQuery.ID,
			OK:                 true,
			ErrorMessage:       "error: payment stage not finished.",
		})
		return
	}

	db, err := general.Auth(update.Message.Chat.ID)
	if err != nil {
		panic(err.Error())
	}
	defer db.Close()

	if update.Message != nil {
		if update.Message.SuccessfulPayment != nil {
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID:    update.Message.Chat.ID,
				Text:      "Payment successful.",
				ParseMode: models.ParseModeMarkdown,
			})
			return
		}
	}

	val, err := manage.GetParam(db, update.Message.Chat.ID, "subscribe_time")
	if err != nil {
		panic(err.Error())
	}
	if reflect.ValueOf(val).Int() < infSubscribeTime {
		err = manage.UpdateParam(db, update.Message.Chat.ID, "subscribe_time", timers.StartWeekUpdate())
		if err != nil {
			panic(err.Error())
		}

		err = manage.UpdateParam(db, update.Message.Chat.ID, "amount_requests", manage.DefaultReqsPerWeek)
		if err != nil {
			panic(err.Error())
		}
	}

	val, err = manage.GetParam(db, update.Message.Chat.ID, "amount_requests")
	amountReqs := reflect.ValueOf(val).Int()
	if amountReqs < 1 {
		_, err = b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   nilRequestsDesc,
			ReplyMarkup: models.InlineKeyboardMarkup{
				InlineKeyboard: [][]models.InlineKeyboardButton{
					{
						{Text: "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É", CallbackData: "button_get_subscribe"},
					},
				},
			},
		})
		if err != nil {
			panic(err.Error())
		}

		return
	}

	err = manage.UpdateParam(db, update.Message.Chat.ID, "amount_requests", amountReqs-1)
	if err != nil {
		panic(err.Error())
	}

	resp, err := googleAISend(ctx, update.Message.Text)
	if err != nil {
		panic(err.Error())
	}

	_, err = b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   resp,
	})
	if err != nil {
		panic(err.Error())
	}
}

func googleAISend(ctx context.Context, req string) (string, error) {
	client, err := genai.NewClient(ctx, option.WithAPIKey(googleAIApiKey))
	if err != nil {
		return "", err
	}
	defer client.Close()

	model := client.GenerativeModel(googleAIVersion)
	resp, err := model.GenerateContent(ctx, genai.Text(req))
	if err != nil {
		return "", err
	}

	return fmt.Sprint(resp.Candidates[0].Content.Parts[0]), nil
}
